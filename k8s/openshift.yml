---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    app.openshift.io/vcs-uri: "git@github.com:valdar/camel-cicd-exampleapp.git"
    app.quarkus.io/quarkus-version: "3.12.0"
    app.quarkus.io/vcs-uri: "https://github.com/valdar/camel-cicd-exampleapp.git"
  labels:
    app.kubernetes.io/managed-by: "quarkus"
    app.kubernetes.io/name: "camel-cicd-exampleapp"
    app.kubernetes.io/version: "1.0-SNAPSHOT"
    app.openshift.io/runtime: "quarkus"
  name: "camel-cicd-exampleapp"
spec:
  ports:
  - name: "http"
    port: 80
    protocol: "TCP"
    targetPort: 8080
  selector:
    app.kubernetes.io/name: "camel-cicd-exampleapp"
    app.kubernetes.io/version: "1.0-SNAPSHOT"
  type: "ClusterIP"
---
apiVersion: "image.openshift.io/v1"
kind: "ImageStream"
metadata:
  labels:
    app.kubernetes.io/name: "camel-cicd-exampleapp"
    app.kubernetes.io/version: "1.0-SNAPSHOT"
  name: "openjdk-17"
spec:
  dockerImageRepository: "registry.access.redhat.com/ubi8/openjdk-17"
  lookupPolicy:
    local: true
---
apiVersion: "image.openshift.io/v1"
kind: "ImageStream"
metadata:
  annotations:
    app.openshift.io/vcs-uri: "git@github.com:valdar/camel-cicd-exampleapp.git"
    app.quarkus.io/quarkus-version: "3.12.0"
    app.quarkus.io/vcs-uri: "https://github.com/valdar/camel-cicd-exampleapp.git"
  labels:
    app.kubernetes.io/managed-by: "quarkus"
    app.kubernetes.io/name: "camel-cicd-exampleapp"
    app.kubernetes.io/version: "1.0-SNAPSHOT"
    app.openshift.io/runtime: "quarkus"
  name: "camel-cicd-exampleapp"
spec:
  lookupPolicy:
    local: true
---
apiVersion: "build.openshift.io/v1"
kind: "BuildConfig"
metadata:
  annotations:
    app.openshift.io/vcs-uri: "git@github.com:valdar/camel-cicd-exampleapp.git"
    app.quarkus.io/quarkus-version: "3.12.0"
    app.quarkus.io/vcs-uri: "https://github.com/valdar/camel-cicd-exampleapp.git"
  labels:
    app.kubernetes.io/managed-by: "quarkus"
    app.kubernetes.io/name: "camel-cicd-exampleapp"
    app.kubernetes.io/version: "1.0-SNAPSHOT"
    app.openshift.io/runtime: "quarkus"
  name: "camel-cicd-exampleapp"
spec:
  output:
    to:
      kind: "ImageStreamTag"
      name: "camel-cicd-exampleapp:1.0-SNAPSHOT"
  source:
    binary: {}
  strategy:
    sourceStrategy:
      from:
        kind: "ImageStreamTag"
        name: "openjdk-17:1.19"
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  annotations:
    app.openshift.io/vcs-uri: "git@github.com:valdar/camel-cicd-exampleapp.git"
    app.quarkus.io/quarkus-version: "3.12.0"
    app.quarkus.io/vcs-uri: "https://github.com/valdar/camel-cicd-exampleapp.git"
  labels:
    app.kubernetes.io/managed-by: "quarkus"
    app.kubernetes.io/name: "camel-cicd-exampleapp"
    app.kubernetes.io/version: "1.0-SNAPSHOT"
    app.openshift.io/runtime: "quarkus"
  name: "camel-cicd-exampleapp"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "camel-cicd-exampleapp"
      app.kubernetes.io/version: "1.0-SNAPSHOT"
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: "*"
        app.openshift.io/vcs-uri: "git@github.com:valdar/camel-cicd-exampleapp.git"
        app.quarkus.io/quarkus-version: "3.12.0"
        app.quarkus.io/vcs-uri: "https://github.com/valdar/camel-cicd-exampleapp.git"
      labels:
        app.kubernetes.io/managed-by: "quarkus"
        app.kubernetes.io/name: "camel-cicd-exampleapp"
        app.kubernetes.io/version: "1.0-SNAPSHOT"
        app.openshift.io/runtime: "quarkus"
    spec:
      containers:
      - env:
        - name: "JAVA_APP_JAR"
          value: "/deployments/quarkus-run.jar"
        image: "camel-cicd-exampleapp:1.0-SNAPSHOT"
        imagePullPolicy: "Always"
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: "/q/health/live"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: "camel-cicd-exampleapp"
        ports:
        - containerPort: 8080
          name: "http"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: "/q/health/ready"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        startupProbe:
          failureThreshold: 3
          httpGet:
            path: "/q/health/started"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10